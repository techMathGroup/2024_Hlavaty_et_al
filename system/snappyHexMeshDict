/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;

// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    cylinder
    {
        type    searchableCylinder;
        point1  (0 0 0.0);
        point2  (0 0  0.25);
        radius  0.007525;
    }
    
    smallRefBox
    {
        type searchableBox;
        min (-0.0240 -0.0105 0.05);
        max (0.11 0.0105 0.2);
    }
    vzaduRefBox
    {
        type searchableBox;
        min (0.07 -0.03 0.05);
        max (0.11 0.03 0.2);
    }
    sikmoRefBox1
    {
        type searchableBox;
        min (0.025 -0.03 0.05);
        max (0.07 0.03 0.2);
    }
    sikmoRefBox2
    {
        type searchableBox;
        min (0.0 -0.019 0.05);
        max (0.05 0.019 0.2);
    }
    refin5 
    {
       type searchableBox;
       min (-5 -0.125 0.0);
       max (0.25 0.125 0.255);
    }

    refinementBox
    {
        type searchableBox;
        min (-0.009 -0.05 0.0);
        max ( 0.125  0.05 0.25);
    }
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells   50000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells  100000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        cylinder
        {
            level (3 4);
        }
    }

    // Resolve sharp angles
    resolveFeatureAngle 120;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.
    
    // - volumetric refinement

    refinementRegions
    {
        cylinder
        {
            mode    distance;
            levels  ((0.008 3));
        }
        refinementBox
        {
            mode inside;
            levels ((1E4 2));
        }
        smallRefBox
        {
            mode inside;
            levels ((1E4 3));
        }
        vzaduRefBox
        {
            mode inside;
            levels ((1E4 3));
        }
        sikmoRefBox1
        {
            mode inside;
            levels ((1E4 3));
        }
        sikmoRefBox2
        {
            mode inside;
            levels ((1E4 3));
        }
       refin1 
        {
            mode inside;
            levels ((1E4 2));
        }

       refin4 
        {
            mode inside;
            levels ((1E4 2));
        }
       refin3 
        {
            mode inside;
            levels ((1E4 2));
        }
       refin5 
        {
            mode inside;
            levels ((1E4 1));
        }
       refin2 
        {
            mode inside;
            levels ((1E4 2));
        }
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh 	(0.03000 0.02500 0.00350);
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh 	(0.2 0.00 0.00);


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}



// Settings for the snapping. - TO BE REFINED
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 10;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 1.0;//2.0

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 100;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 30;

    // Feature snapping

        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
        nFeatureSnapIter 10;//20

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap true;//false

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap false;//true

        //~ //- Detect points on multiple surfaces (only for explicitFeatureSnap)
        multiRegionFeatureSnap false;//true
}



// Settings for the layer addition. - TO BE REFINED
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;
    //~relativeSizes false;

    // Per final patch (so not geometry!) the layer information
    layers
    {
        cylinder
        {
                nSurfaceLayers 10;
        }
    }

    // Expansion factor for layer mesh
    //~expansionRatio 1.0;
    expansionRatio 1.2;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    
    finalLayerThickness 0.7;
    //~firstLayerThickness 0.7;
    //~finalLayerThickness 0.01;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.1;
    //~minThickness 1.0;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 120;
    //~featureAngle 30;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 30;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    //~maxFaceThicknessRatio 0.5;
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0   ;
    //nBufferCellsNoExtrude -1    ;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 100;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo. - TO BE REFINED
meshQualityControls
{
    #include "meshQualityDict"


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- amount to scale back displacement at error points
    errorReduction 0.75;

}


// Advanced

// Write flags
writeFlags
(
    //~ scalarLevels
    //~ layerSets
    //~ layerFields     // write volScalarField for layer coverage
);

// Flags for optional output
// 0 : only write final meshes
// 1 : write intermediate meshes
// 2 : write volScalarField with cellLevel for postprocessing
// 4 : write current intersections as .obj files
debug 0;


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
